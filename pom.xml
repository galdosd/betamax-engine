<?xml version="1.0" encoding="UTF-8"?>
<!--
    NOTES
       sync; echo 3 | sudo tee /proc/sys/vm/drop_caches
    TODO
        Working set features
            Managed state (JSON)
                Save/load state
                Dev console state & history
                call checkedReSeekAll after load state
                Proper hotloading including preserving state?
            Always load a RAM frame on the fly if needed instead of crashing. It's really very rare. Set a metric
                and log it instead, even in debug mode. I want this code exercised but I don't want to leave debug
                mode because it's so nice!
            Fancy framebuffer CRT style post effects

        Backlog features
            basic steam support
            steam achievements
            osx support
            David sound bugs?
            Worry about texturePreloadAdvisingTimer
                Need to fix busy loop in TextureRegistry, it's not just perf, it also reloads them before we can
                    increment the frame
                Also, what if we're already working on loading it when it gets unloaded... (in batch list)

        Parking lot features
            Choreography problems!
                Now that pollEvents happens halfway through render just as a hack so that getPixel will use the frames
                before they get unloaded (TextureRegistry#processRamUnloadQueue), we have a couple of choreography
                hiccups.
                    Ctrl+F5 calls newWorld, and TAB calls updateLogic. Each respectively should not happen in the
                    middle of a render frame because sprites might be AutoCloseable#close'd for one, other stuff
                    might happen we don't intend. Frankly I don't recall what unstated choreography invariants we
                    have here but we should try to state and enforce them as well as state and enforce the overall
                    order that we do logic, then rendering, not mixing one or the other, and if one affects the other,
                    actions should be queued and played at the necessary time. While we're at it I'd like to have
                    logic in a seperate thread so we can catch python if it hangs and to make it easier to keep updating
                    and keep the application minimally responsive if a logic frame script callback takes a long time
                    This would all be managed with event sourcing for the IPC. Ah yes, the grand old Second System.
            Put all manifests in a single package
            Auto preload all tiny sprites at boot time
            Better "monitoring/alerting" based on metrics values
                Point out when a specific logic or render frame blows the frame time budget
            Sprite sizes
            Click bitmaps
            Rewind
                Efficient preloading for rewind
                Single step backward
            Advance sprite frame
            Switch in and out of full screen at runtime
            Sound should not begin playing till first frame is rendered, so not in SpriteImpl constructor
            Mark where sprite creation happens
            "this" sprite reference / replace_sprite()
            safe sprite references
            better exception traces for jython code?

        Maintenance
            Refactoring
            Triage TODOs
            Enforce glossary terms / reify as objects for type safety ;)
            static analysis
            Windows testing

        Testing
            Generic end to end test?
            Record/replay style testing cause i am too lazy to write test cases
            Timing/choreography/FPS invariants. We already had at least one bug on that

        Performance
            Pre-process textures so program load time is short (LZ4)
            Possibly store texture compressed in memory to save main RAM (LZ4)
            Separate sprites into dayparts so we can load them in chunks rather than all at load time
                Support unloading of textures
                Allow loading to happen in a seperate thread so we can begin preloading early but not too early
            Trim texture to remove transparent border area
            Performance instrumentation, showing VRAM and RAM used etc
            Put data together to help with HDD seek time (for Steam release; on Gallery we use SSD so don't matter)
            Fast texture loading
                Reflections, we only need one instance for all sprites, not keep loading one every time we load
                Show VRAM and RAM texture usage, metrics gauges
                More Metrics timers
                Cooked Metrics Clock so pause time does not count
                Swapping textures out of VRAM
                LZ4 single frame
                Pixel click bitmap
                Keep textureimage in RAM as LZ4
                LZ4 full sprite
                load_template async
                evict_template
                Unload Texture from VRAM also

     GLOSSARY
        Global clock frame (clock frame)
        Sprite moment (rendered frame)
        Sprite
        Sprite template
        Sprite name



-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.github.galdosd.betamax</groupId>
    <artifactId>betamax-engine</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <lwjgl.version>3.1.6</lwjgl.version>
        <metrics.version>4.0.0</metrics.version>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <jackson.version>2.9.5</jackson.version>
    </properties>

    <profiles>
        <profile>
            <id>lwjgl-natives-linux</id>
            <activation>
                <os><family>unix</family></os>
            </activation>
            <properties>
                <lwjgl.natives>natives-linux</lwjgl.natives>
            </properties>
        </profile>
        <!-- need to find a mac to test on --><!-- <profile>
            <id>lwjgl-natives-macos</id>
            <activation>
                <os><family>mac</family></os>
            </activation>
            <properties>
                <lwjgl.natives>natives-macos</lwjgl.natives>
            </properties>
        </profile> -->
        <profile>
            <id>lwjgl-natives-windows</id>
            <activation>
                <os><family>windows</family></os>
            </activation>
            <properties>
                <lwjgl.natives>natives-windows</lwjgl.natives>
            </properties>
        </profile>
    </profiles>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <mainClass>com.github.galdosd.betamax.engine.BetamaxGlProgram</mainClass>
                        </manifest>
                    </archive>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id> <!-- this is used for inheritance merges -->
                        <phase>package</phase> <!-- bind to the packaging phase -->
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <!-- FIXME include user-facing documentation to comply with OSS licenses
             that require eg, putting a disclaimer stating the license etc -->
        <!-- FIXME update our dependencies -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.16.6</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>19.0</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.1.3</version>
        </dependency>
        <dependency>
            <groupId>com.twelvemonkeys.imageio</groupId>
            <artifactId>imageio-tiff</artifactId>
            <version>3.3.2</version>
        </dependency>
        <dependency>
            <groupId>io.dropwizard.metrics</groupId>
            <artifactId>metrics-core</artifactId>
            <version>${metrics.version}</version>
        </dependency>
        <dependency>
            <groupId>org.reflections</groupId>
            <artifactId>reflections</artifactId>
            <version>0.9.11</version>
        </dependency>
        <dependency>
            <groupId>org.python</groupId>
            <artifactId>jython-standalone</artifactId>
            <version>2.7.1</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>org.kohsuke</groupId>
            <artifactId>wordnet-random-name</artifactId>
            <version>1.3</version>
        </dependency>

        <!-- all the lwjgl crap -->
        <dependency>
            <groupId>org.lwjgl</groupId>
            <artifactId>lwjgl</artifactId>
            <version>${lwjgl.version}</version>
        </dependency>
        <dependency>
            <groupId>org.lwjgl</groupId>
            <artifactId>lwjgl-glfw</artifactId>
            <version>${lwjgl.version}</version>
        </dependency>
        <dependency>
            <groupId>org.lwjgl</groupId>
            <artifactId>lwjgl-opengl</artifactId>
            <version>${lwjgl.version}</version>
        </dependency>
        <dependency>
            <groupId>org.lwjgl</groupId>
            <artifactId>lwjgl</artifactId>
            <version>${lwjgl.version}</version>
            <classifier>${lwjgl.natives}</classifier>
        </dependency>
        <dependency>
            <groupId>org.lwjgl</groupId>
            <artifactId>lwjgl-glfw</artifactId>
            <version>${lwjgl.version}</version>
            <classifier>${lwjgl.natives}</classifier>
        </dependency>
        <dependency>
            <groupId>org.lwjgl</groupId>
            <artifactId>lwjgl-opengl</artifactId>
            <version>${lwjgl.version}</version>
            <classifier>${lwjgl.natives}</classifier>
        </dependency>
        <dependency>
            <groupId>org.lwjgl</groupId>
            <artifactId>lwjgl-stb</artifactId>
            <version>${lwjgl.version}</version>
        </dependency>
        <dependency>
            <groupId>org.lwjgl</groupId>
            <artifactId>lwjgl-stb</artifactId>
            <version>${lwjgl.version}</version>
            <classifier>${lwjgl.natives}</classifier>
        </dependency>
        <dependency>
            <groupId>org.lwjgl</groupId>
            <artifactId>lwjgl-openal</artifactId>
            <version>${lwjgl.version}</version>
        </dependency>
        <dependency>
            <groupId>org.lwjgl</groupId>
            <artifactId>lwjgl-openal</artifactId>
            <version>${lwjgl.version}</version>
            <classifier>${lwjgl.natives}</classifier>
        </dependency>
        <dependency>
            <groupId>org.lwjgl</groupId>
            <artifactId>lwjgl-lz4</artifactId>
            <version>${lwjgl.version}</version>
            <classifier>${lwjgl.natives}</classifier>
        </dependency>
        <dependency>
            <groupId>org.lwjgl</groupId>
            <artifactId>lwjgl-lz4</artifactId>
            <version>${lwjgl.version}</version>
        </dependency>
        <!-- FIXME specify versions of maven plugins! reproducible builds! -->
    </dependencies>
</project>